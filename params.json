{
  "name": "Component v/s Directive",
  "tagline": "This blog explain difference between Component and Directive in Angular2",
  "body": "# Component v/s Directive\r\n\r\nThis blog explain difference between Component and Directive in **Angular2**.\r\n\r\nIn **Angular1** we use **directive** for below reasons:\r\n\r\n1. To add behavior to an existing DOM element.\r\n2. To create a component with attached behaviour.\r\n\r\n**Angular2** have introduced two different meta-data annotation for these, First is **@Directive**, which is used to add behaviour \r\nto an existing element. Second is **@Component**, which is used to create a component with attached behaviour. For more difference \r\nand example have a look below points:\r\n\r\n1. We create **Component** with the help of **@Component** meta-data annotation while we create **Directive** with the help of \r\n    **@Directive** meta-data annotation.\r\n\r\n2. **@Component** is used to create new **View(Shadow DOM)** with attached behaviour while **@Directive** is used to add behavior \r\n    to an existing DOM element.\r\n\r\n3. With the help of **@Component** we can break our application into small-2 components, and can do component base development\r\n    while with the help of **@Directive** we can attached different-2 behaviours to an existing DOM element or different-2 \r\n    existing DOM element.\r\n\r\n4. **@Component** is used to create reusable components while **@Directive** is used to create reusable behaviour.\r\n\r\n5. **@Component** requires a view via **@View** or **template/url** while **@Directive** does not.\r\n    > **@View** or **template/url** is mandatory in the component.\r\n\r\n6. Example:\r\n    **@Component**\r\n    ---\r\n    \r\n    ```TypeScript\r\n    import {Component} from '@angular/core';\r\n    import {EnterDirective} from \"./sample.directive\";\r\n    \r\n    @Component({\r\n        selector: 'sample-component',\r\n        template: `\r\n           <strong>Hello World</strong> form <strong>{{name}} Component</strong>!\r\n           <br/>\r\n           <input type=\"text\" (enter)=\"enterHandler($event)\" >\r\n        `,\r\n        directives: <any>[EnterDirective]\r\n    })\r\n    export class SampleComponent {\r\n        name:string = 'Sample';\r\n    \r\n        enterHandler(event) {\r\n            console.log(event);\r\n        }\r\n    }\r\n    ```\r\n    \r\n    **@Directive**\r\n    ---\r\n    \r\n    ```TypeScript\r\n    import {Directive, Output} from \"@angular/core\";\r\n    import {EventEmitter} from \"@angular/common/src/facade/async\";\r\n    \r\n    @Directive({\r\n        selector: '[enter]',\r\n        host: {\r\n            '(keypress)': 'enterHandler($event)'\r\n        }\r\n    })\r\n    export class EnterDirective {\r\n        @Output() enter = new EventEmitter<any>();\r\n    \r\n        constructor() {\r\n        }\r\n    \r\n        enterHandler(event) {\r\n            if (event.keyCode == 13) {\r\n                this.enter.emit(event);\r\n            }\r\n        }\r\n    }\r\n    ```\r\n\r\n> Communication between **Component** and **Directive** can be same way as we do between two **Components**. \r\n\r\nFollow Me\r\n---\r\n[Github](https://github.com/AmitThakkar)\r\n\r\n[Twitter](https://twitter.com/amit_thakkar01)\r\n\r\n[LinkedIn](https://in.linkedin.com/in/amitthakkar01)\r\n\r\n[More Blogs By Me](http://amitthakkar.github.io/)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}